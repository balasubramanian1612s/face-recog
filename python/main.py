import cv2
import numpy as np
import face_recognition

imgBala = face_recognition.load_image_file('/Users/Balasubramanian/Desktop/python/images/sri.jpg')
imgBala = cv2.cvtColor(imgBala, cv2.COLOR_BGR2RGB)
imgBala1 = face_recognition.load_image_file('/Users/Balasubramanian/Desktop/python/images/sri1.jpeg')
imgBala1 = cv2.cvtColor(imgBala1, cv2.COLOR_BGR2RGB)
test = face_recognition.load_image_file('/Users/Balasubramanian/Desktop/python/images/bala1.jpeg')
test = cv2.cvtColor(test, cv2.COLOR_BGR2RGB)
imgDad = face_recognition.load_image_file('/Users/Balasubramanian/Desktop/python/images/appa.jpg')
imgDad = cv2.cvtColor(imgDad, cv2.COLOR_BGR2RGB)
faces=[]
faceLoc= face_recognition.face_locations(imgBala)[0]
encodeBala=face_recognition.face_encodings(imgBala)[0]
faceLocDad= face_recognition.face_locations(imgDad)[0]
encodeDad=face_recognition.face_encodings(imgDad)[0]
faceLoc1= face_recognition.face_locations(imgBala1)[0]
encodeBala1=face_recognition.face_encodings(imgBala1)[0]

faceTest= face_recognition.face_locations(test)[0]
encodeTest=face_recognition.face_encodings(test)[0]

faces.append(encodeBala)
# faces.append(encodeBala1)
faces.append(encodeDad)
faces.append(encodeTest)
# faces.append(encodeBala1)
# faces=[([-1.94133192e-01,  6.11659735e-02,  1.37446463e-01,  4.11473960e-02,
#        -6.66815937e-02, -6.78973794e-02, -2.37422064e-02, -2.69973706e-02,
#         1.40772983e-01, -1.37837738e-01,  1.61320731e-01, -6.57210052e-02,
#        -2.20546275e-01, -5.52713238e-02,  1.72518641e-02,  7.32456446e-02,
#        -8.89310911e-02, -1.15466349e-01, -3.79585326e-02, -6.21203557e-02,
#         2.96194851e-02, -2.45874375e-03, -4.51175049e-02,  1.50028616e-03,
#        -1.38166755e-01, -3.39985728e-01, -3.05171125e-02, -1.21607438e-01,
#        -4.07710671e-02, -6.40539080e-02, -3.41803953e-03,  2.08056420e-02,
#        -1.87562376e-01, -1.74189210e-02, -7.18624368e-02,  1.20826870e-01,
#         2.96125337e-02,  8.48262012e-03,  1.90488070e-01, -4.08290997e-02,
#        -1.32870108e-01, -7.26106763e-02, -2.48318613e-02,  2.40600839e-01,
#         1.25761390e-01,  3.59033048e-02, -3.08170915e-04,  2.16165781e-02,
#         7.27631897e-02, -2.61092186e-01,  7.25790393e-03,  1.29707098e-01,
#         4.74129766e-02,  1.91055536e-02,  9.49931294e-02, -1.13425888e-01,
#         1.71372294e-03,  2.18763202e-02, -1.52659088e-01,  7.74104968e-02,
#         1.42700672e-02, -1.01773039e-01, -6.58077896e-02, -2.12438479e-02,
#         3.12425256e-01,  6.69429973e-02, -8.14684033e-02, -5.29502258e-02,
#         1.64733335e-01, -1.60571501e-01, -3.24916244e-02,  4.28349115e-02,
#        -8.17175731e-02, -1.59033656e-01, -2.64598131e-01,  1.06204316e-01,
#         4.12209839e-01,  1.41334414e-01, -1.83595002e-01,  8.81781802e-02,
#        -9.67620313e-02, -5.13736121e-02,  1.06468529e-01,  7.06908926e-02,
#        -2.10852399e-02,  5.51931560e-02, -8.54560956e-02,  7.71099627e-02,
#         2.00164884e-01,  1.61589682e-03, -3.88726816e-02,  1.49700344e-01,
#        -6.92148507e-03,  2.03808844e-02,  1.15506407e-02, -9.58776772e-02,
#        -1.69614106e-02, -5.45397177e-02, -9.87723991e-02, -8.84536654e-03,
#         1.59215480e-01, -6.89888000e-02, -1.62276626e-03,  7.64843673e-02,
#        -1.74048871e-01,  5.94549030e-02, -9.90425050e-03, -5.51729724e-02,
#         1.23012289e-02,  4.71936315e-02, -1.55950084e-01, -1.69627368e-02,
#         1.60358444e-01, -2.42894024e-01,  2.07872212e-01,  1.23490244e-01,
#        -2.49614138e-02,  1.60556793e-01,  5.22627197e-02,  4.90081459e-02,
#         2.80373022e-02,  3.38418335e-02, -1.04476243e-01, -1.04924351e-01,
#         5.74986190e-02,  2.04430073e-02,  1.15189686e-01,  5.03607392e-02]), ([-6.11238480e-02, -4.35656011e-02,  4.14941311e-02, -2.75088623e-02,
#        -3.67536992e-02, -8.31088424e-02,  9.08674300e-02, -9.57573056e-02,
#         1.62268192e-01, -1.59610063e-01,  2.03499198e-01, -3.61563712e-02,
#        -2.16288954e-01, -1.16971292e-01,  3.49486843e-02,  1.08494729e-01,
#        -7.03217015e-02, -1.37400538e-01, -1.26989067e-01, -9.19625834e-02,
#         6.60180002e-02,  3.98212820e-02,  4.55201380e-02, -3.28017324e-02,
#        -1.59264728e-01, -3.51752222e-01, -9.13439989e-02, -1.14151612e-01,
#         6.95842803e-02, -6.19508773e-02,  2.42126957e-02,  3.09580863e-02,
#        -1.57378078e-01, -7.05780238e-02, -7.69779086e-04,  1.74818300e-02,
#         2.45347768e-02, -4.08480689e-02,  2.29786932e-01,  6.38209805e-02,
#        -2.28457123e-01,  1.04551747e-01, -1.81503445e-02,  3.00306916e-01,
#         1.44320965e-01,  2.67365538e-02,  4.62109260e-02, -1.41446546e-01,
#         7.91107416e-02, -2.26456508e-01,  1.02742121e-01,  3.26381996e-02,
#         7.03718662e-02, -2.83694714e-02,  1.56863049e-01, -1.46107644e-01,
#         4.54279184e-02,  2.89800968e-02, -2.66910732e-01,  1.08611740e-01,
#         8.21350813e-02, -3.54956090e-02, -9.92957503e-05,  2.16235220e-03,
#         2.13762581e-01,  2.73992419e-02, -8.67859498e-02, -6.90344200e-02,
#         1.75274804e-01, -1.75882220e-01,  3.88562158e-02,  5.66440932e-02,
#        -8.15311298e-02, -1.57702401e-01, -2.86308229e-01,  9.59780067e-02,
#         4.62095410e-01,  1.23483598e-01, -2.33556867e-01,  5.61532229e-02,
#        -7.69371316e-02,  1.63525343e-02,  2.16801926e-01,  8.36556479e-02,
#        -4.61963564e-02, -1.61290467e-02, -1.02003515e-01,  1.77750289e-02,
#         1.60266206e-01, -2.35076696e-02, -8.28873515e-02,  2.31689766e-01,
#         2.54777484e-02, -3.76117304e-02,  1.05054721e-01,  2.73122489e-02,
#        -1.59856051e-01, -1.41104609e-02, -9.65201184e-02, -2.12303996e-02,
#         1.21338554e-01, -1.40958875e-01,  4.78759184e-02,  1.09291092e-01,
#        -1.79382756e-01,  1.56033084e-01, -5.80724776e-02, -9.37037021e-02,
#         3.67311537e-02,  4.78455573e-02, -6.93962127e-02, -5.17331958e-02,
#         7.86114484e-02, -2.66151637e-01,  1.83282539e-01,  1.74713314e-01,
#        -2.37583928e-03,  1.71361387e-01,  2.96744779e-02,  7.45159984e-02,
#        -2.81071514e-02,  8.31856206e-02, -1.37343988e-01, -5.45664653e-02,
#         4.73846495e-03,  1.88275054e-02,  1.20331034e-01,  5.31131029e-02]), ([-0.18944949,  0.04122553,  0.10888089,  0.02043042, -0.03685682,
#        -0.03938706, -0.02830065, -0.0747482 ,  0.10797595, -0.17013419,
#         0.16318461, -0.05844054, -0.17217463, -0.07932906,  0.02231786,
#         0.07919484, -0.1187349 , -0.12416609, -0.04192447, -0.06826366,
#         0.06111355,  0.02114252, -0.04257836,  0.02518278, -0.16390155,
#        -0.3582522 , -0.07242899, -0.10118412, -0.02435968, -0.07903253,
#        -0.00165093, -0.00297884, -0.18350631,  0.0194868 , -0.0604778 ,
#         0.11417536,  0.02994336, -0.05290132,  0.12614286, -0.04616838,
#        -0.14342761, -0.08343555,  0.04515294,  0.22910905,  0.15304586,
#         0.02870316, -0.04091091, -0.01430409,  0.07311247, -0.22737758,
#         0.0262786 ,  0.08066873,  0.02429655,  0.0406458 ,  0.09767538,
#        -0.12235248,  0.02690578,  0.04793257, -0.16664475,  0.05424696,
#        -0.03222666, -0.11343585, -0.04335072, -0.00536263,  0.25617486,
#         0.06792412, -0.09145619, -0.04253313,  0.1436172 , -0.17109382,
#        -0.01069114,  0.01413295, -0.07166053, -0.19712904, -0.3004849 ,
#         0.08266658,  0.41949981,  0.17233251, -0.16638285,  0.09879081,
#        -0.05751329, -0.04373008,  0.13871765,  0.10632733, -0.05211908,
#         0.03867496, -0.08802377,  0.10492955,  0.17464586,  0.04035654,
#        -0.03629009,  0.18885294, -0.04155727, -0.00181433,  0.04134551,
#        -0.03723587, -0.06427778, -0.03402823, -0.09615029, -0.03560009,
#         0.14731096, -0.06866085,  0.0060651 ,  0.11457907, -0.18644604,
#         0.07788454,  0.02451639, -0.05661092,  0.05473951,  0.01912664,
#        -0.14981429, -0.03364173,  0.1202584 , -0.25053787,  0.13385952,
#         0.14376375,  0.01307373,  0.21819979,  0.07416423,  0.06162003,
#         0.01263626, -0.00862688, -0.13972245, -0.03305641,  0.06959277,
#         0.01477986,  0.10838287,  0.041138  ])]
print(faces)
# print(encodeBala)
# print(encodeDad)


results=face_recognition.compare_faces(faces,encodeBala1)
faceDis=face_recognition.face_distance(faces,encodeBala1)

print(results, faceDis)

# cv2.imshow("Bala", imgBala)
# cv2.imshow("Bala", imgBala1)
# cv2.waitKey(1)
